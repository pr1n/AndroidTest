package com.pr1n.designpattern

import java.util.Calendar

/**
 * 设计模式六大设计原则：
 *      1.单一职责原则
 *          1）降低类的复杂度，一个类只负责一项职责
 *          2）提高类的可读性，可维护性
 *          3）降低更变引起的风险
 *      2.开闭原则
 *          1）模块，类和函数应该对扩展开放，对修改关闭（用抽象构建框架，用实现扩展细节）
 *      3.里氏替换原则
 *          1）引用基类的地方必须能透明地使用其子类的对象
 *          2）子类尽量不要重写父类的方法
 *      4.依赖倒置原则
 *          1）高层模块不应该依赖低层模块，二者都应该依赖于其抽象
 *          2）抽象不应该依赖于细节，细节应该依赖于抽象
 *          3）依赖倒转的中心思想使面向接口编程
 *          4）细节多变，抽象稳定；抽象指接口和抽象类，细节指实现类
 *          5）接口和抽象类使指定规范，不涉及任何具体操作；吧展现细节的任务交给实现类去完成
 *      5.迪米特法则（最少知道原则）
 *          1）一个对象应该对别一个对象保持最少了解
 *      6.接口隔离原则
 *          1）一个类依赖别一个接口应该建立在最小的接口上
 *      *7.合成复用原则
 *          1）尽量使用合成/聚合的方式，而不是使用继承
 *
 *
 * 设计模式期望达到的目的：
 *      1）代码重用性
 *      2）代码可读性
 *      3）可扩展性
 *      4）可靠性
 *      5）使程序呈现高内聚，低耦合的特性
 *
 *
 * GOF 23 种设计模式：
 * 创建型模式：①单例模式 ②工厂模式 ③抽象工厂模式 ④建造者模式 ⑤原型模式
 * 结构型模式：①装饰模式 ②外观模式 ③组合模式 ④代理模式 ⑤桥接模式 ⑥适配器模式 ⑦享元模式
 * 行为型模式：①模板方法模式 ②命令模式 ③访问者模式 ④迭代器模式 ⑤观察者模式 ⑥中介者模式 ⑦备忘录模式 ⑧解释器模式 ⑨状态模式 ⑩策略模式 ⑾责任链模式
 */
class Singleton private constructor() {

    companion object {
        val instance: Singleton = Singleton()
    }

}

fun main() {
    Singleton.instance

    Calendar.getInstance().get(1)

    Thread.currentThread()
}